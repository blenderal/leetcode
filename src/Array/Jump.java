package Array;

/**
 * @description:
 * 45. 跳跃游戏 II
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 *
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 *
 * 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 *
 * 示例:
 *
 * 输入: [2,3,1,1,4]
 * 输出: 2
 * 解释: 跳到最后一个位置的最小跳跃数是 2。
 *      从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
 * 说明:
 *
 * 假设你总是可以到达数组的最后一个位置。
 * @author: zww
 * @date: 2020/7/16
 * @version: V1.0
 */
public class Jump {
    public static void main(String[] args) {
        int[] nums = new int[]{2,3,1,1,4};
        System.out.println(jump(nums));
    }

    /**
     * [2,  1,  2,  3,  1,  4,  2,  1,  1]
     *   --------
     *       ----
     *           --------
     *               ------------
     *                   -----
     *                        ------------
     * 1    1   1   2   2   3   3   4   4       <----到达该位置最少需要跨过的不重叠的路线条数
     * 虚线部位为能横跨的距离
     * 通过观察我们可以直到到达数组某个位置所需的跳跃次数为不重叠路线的数目
     * 去除重叠如下图
     * [2,  1,  2,  3,  1,  4,  2,  1,  1]
     *   --------
     *
     *           --------
     *                   --------
     *
     *                           ---------
     * 1    1   1   2   2   3   3   4   4       <----到达该位置最少需要跨过的不重叠的路线条数
     *
     * @param nums
     * @return
     */
    public static int jump(int[] nums) {
        int end = 0;
        int max = 0;
        int count = 0;
        for (int i = 0; i < nums.length-1; i++) {
            // 更新当前位置能达到的最远地点
            max = Math.max(max, i + nums[i]);
            // 只有当当前位置为上跳跨越最宽路线的末尾时
            if (i == end) {
                // 才更新末尾为能到达的最远位置 并且将跳跃次数加1
                end = max;
                count++;
            }
            // 如果末尾已到达最末位置 则可提前退出
            if(end >= nums.length-1){
                break;
            }
        }
        return count;
    }
}
